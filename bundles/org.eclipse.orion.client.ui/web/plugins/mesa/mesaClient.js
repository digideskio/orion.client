define(["require", "exports", "orion/Deferred", "orion/git/gitClient"], function (require, exports, Deferred, mGitClient) {
    // import _ = require("orion/URL-shim");
    // eclipse.MesaService = 4;
    var MesaService;
    (function (MesaService_1) {
        function appendGitStatusResults(changedFiles, gitStatusResults, changeType) {
            gitStatusResults.forEach(function (statusResult) {
                if (Util.ResourceFormatter.hasDataTableExtension(statusResult.Name)) {
                    changedFiles[statusResult.Location] = changeType;
                }
            });
        }
        var MesaService = (function () {
            function MesaService(serviceRegistry) {
                this._serviceRegistry = serviceRegistry;
                this._serviceRegistration = serviceRegistry.registerService("orion.git.provider", this);
            }
            MesaService.prototype.getChangedFileStatus = function (repoLocation) {
                var gitClient = this._serviceRegistry.getService("orion.git.provider");
                if (gitClient === null) {
                    gitClient = new mGitClient.GitService(this._serviceRegistry);
                }
                var deferredResult = new Deferred();
                var gitStatusDeferred = gitClient.getGitStatus("/gitapi/status" + repoLocation);
                // TODO: Don't do this. Look into accessing the credentials stored in Orion's native Git-ness.
                //       It may be necessary to require users to set them up the first time they login
                var gitPrivateKey = "-----BEGIN RSA PRIVATE KEY-----\n"
                    + "MIIEpgIBAAKCAQEAwZFQiiC4LROpB0E8VlFo0tLJyklXvglzZcwagPLF0pOMz3Jd\n"
                    + "Hwj2cIt5M4qnnGhhdMGXUhwrg+h861oj0yV2BDxSD8Jb2mguyeMFB4yv4VOs5CAo\n"
                    + "j80I/u/q8qKyJnHbf3ctTpyegi17bvkfHntvoMcYSpb5QcGyOq9ep0oPjiKSHvc5\n"
                    + "mEa7nHz5FKagOJ74kIhw3BsPfgB519jHX0GaFHuXV3l6nFUJdyMKV1adj52QyVG7\n"
                    + "cUqYm2QJOywQQsMqikebAt02vsEdh9qiEBCnyGnG9bdzNAkNx07dHWL/DNvoDGzf\n"
                    + "mfL1MvKMQmY7rOXhZikjdeRWry+IQ0YXZA+ZWwIDAQABAoIBAQCd5DzADyRskIbm\n"
                    + "Bg6DknBg19QGD4Fk4CyjMrPDz0QSGo1Xgb/32sW60+oPYuCJspMcO/WE4rmUJYYQ\n"
                    + "LDzgtMPpfJKrjCyEoUrZHzcxC09EC48RnjG36tWVrnoFZTTQKzuSY9IvN44MPbFb\n"
                    + "uhXqNWG+0eg8n52+R5NsTzR0XPMHSjkbDu7MoKa+3+4OoyjCl4lGCzV2ptvh7pge\n"
                    + "j4f7SaHSZ1Odoc6RDjqj/4sCDD9DoAymynbJX7jJf44ZGHH+ykFKnY3gXF5OAxBH\n"
                    + "EVIwvzZA8ObnRWx0VBtXjHVuLm0YWLka3iYbAGtr24zlqG5fb8RA6pSLnWeuquW/\n"
                    + "PGgTqxvBAoGBAP/cMYM0yeaPip8ltDz0SAODQXlbwHM4HI3zNi5od39YnJuNuQ/K\n"
                    + "EyXQPFv61eyHcYidXcCLsn0kcPw0wuTTeLWmrSoUF7kAyjAwSy1K+USj/b6cjBr0\n"
                    + "Fj6Cfw9jOQmHQ7Ivc8mejBESRE2iUOgRYxwb7Dp9EWidP06rNslXCcSxAoGBAMGs\n"
                    + "Z1NlgtmXtqZLAEJPw6xhAxBbH80kzpURB3AGf6SLxEpn94uIyKDqAD+eC74bIR8n\n"
                    + "aG08M7uuxB9c8SNHPG9A1ljEz43XFvQJQXgctdC6hE2TEH2L1Ecdd8VmtIzzJOh8\n"
                    + "07Cxerlt6OxMyj9e39GTJfb0UCkdnstMLPXhBvHLAoGBAOoeUi/83cJbFj0KAyLD\n"
                    + "ZCHSuNaTXkYP0hERu0I71RxxuNudkvkfruWq5ZBEtfr49KpNVLwbF/fqoHgmzy8T\n"
                    + "UiDlow4d1Jc0Yc42YpPPRsfIRydjl9ASCUipoBo0cLyHSSqCwTB8Iy57yIRBQkcX\n"
                    + "odjWtBHQ310ahhM2F6ukOQwBAoGBAKAJobw1NsItbr3NXiJtnSi1ZX2/fvDayGY/\n"
                    + "kyDMDe/fms1NSi4gUoE9vATVyahG7MC8pLsXMzyUtvWfrJdVRyg7sKPbxhLUOOBh\n"
                    + "QZtKRid76NXdf5Pu1vQI8q7JJssOJGKEu7zXe6z8mKui7MEe2d5pNMbzrcW79zrQ\n"
                    + "8JohX8avAoGBAKVJ8XW+i8l8WVTrxDeAjmt7tXrwE58E7yaWVSosFiWDCaM/WEYq\n"
                    + "hi8HkFo6PRCbcDO11vnw0uBU1MjHMA8rdlUvmvtzzyXh5DzM6WyyqhPyA1udCdo4\n"
                    + "HJVzItVt+ZVvoqV1rBvUPJhKuH33kI1Hk3LkAOt7N7AGsFcC5bs64tFK\n"
                    + "-----END RSA PRIVATE KEY-----\n";
                gitClient.doFetch("/gitapi/remote/origin/master/" + repoLocation, false, null, null, null, gitPrivateKey, null).then(function (response) {
                    gitClient.getGitRemote("/gitapi/remote/origin/master" + repoLocation).then(function (remoteStatus) {
                        var gitDiffDeferred = gitClient.doGitDiff("/gitapi/diff/" + remoteStatus.Id
                            + "..HEAD/" + repoLocation + "?showNameAndStatusOnly=true&parts=diff");
                        Deferred.all([gitStatusDeferred, gitDiffDeferred]).then(function (result) {
                            var changedFiles = {};
                            // initialize with git diff result before adding git status results so status changeType,
                            // which is more recent, overwrites diff change type
                            var diffFilenames = Object.keys(result[1]);
                            for (var i = 0; i < diffFilenames.length; i++) {
                                var filename = diffFilenames[i];
                                if (Util.ResourceFormatter.hasDataTableExtension(filename)) {
                                    changedFiles[repoLocation + filename] = result[1][filename];
                                }
                            }
                            var statusData = result[0];
                            appendGitStatusResults(changedFiles, statusData.Added.concat(statusData.Untracked), OrionGit.ChangeType.ADD);
                            appendGitStatusResults(changedFiles, statusData.Missing.concat(statusData.Removed), OrionGit.ChangeType.DELETE);
                            appendGitStatusResults(changedFiles, statusData.Changed.concat(statusData.Conflicting).concat(statusData.Modified), OrionGit.ChangeType.DELETE);
                            deferredResult.resolve(changedFiles);
                        });
                    });
                });
                return deferredResult;
            };
            MesaService.prototype.getFileReplacements = function (repoLocation) {
                var changedFiles = {};
                var deferredResult = new Deferred();
                this.getChangedFileStatus("repo").then(function (changedFileStatuses) {
                    var fileDeferreds = [];
                    var filenames = [];
                    var fileLocations = Object.keys(changedFileStatuses);
                    for (var i = 0; i < fileLocations.length; i++) {
                        var fileLocation = fileLocations[i];
                        if (changedFileStatuses[fileLocation] === OrionGit.ChangeType.DELETE) {
                            // TODO replace with error
                            changedFiles[Util.ResourceFormatter.fileLocationToId(fileLocation, repoLocation)] = "";
                        }
                        else {
                            // TODO here in TypeScript conversion -- does Typescript support JavaScript URL?
                            // https://developer.mozilla.org/en-US/docs/Web/API/URL/URL
                            var url = new URL(fileLocation);
                            fileDeferreds.push(xhr("GET", url.href, {
                                headers: { "Orion-Version": "1" }
                            }));
                            filenames.push(Util.ResourceFormatter.fileLocationToId(fileLocation, repoLocation));
                        }
                    }
                });
                // TODO handle optOnError
                Deferred.all(fileDeferreds).then(function(contents) {
                    if (contents.length !== filenames.length) {
                        // TODO should never happen. Still, handle it
                    }
                    for (var i = 0; i < contents.length; i++) {
                        changedFiles[fileLocations[i]] = contents[i].responseText;
                    }
                    deferredResult.resolve(changedFiles);
                });
                return deferredResult;
            };
            return MesaService;
        })();
        MesaService_1.MesaService = MesaService;
    })(MesaService || (MesaService = {}));
});

//# sourceMappingURL=data:application/json;base64,